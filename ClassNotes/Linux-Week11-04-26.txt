Week 11 (Theme of the week : Command separation and shell substitution - amendment to the almost-complete version)

  Shell special characters ( conditional special char. and unconditional special char. ) and shell meta-characters

  BashScriptEssentials.txt : bash-extensions ( '(( ... ))', '$(( ... ))', '[[ ... ]]' ) and order of substitution

∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼

學生必須預先讀與練習以下，上課時問與練習。

∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼

Recall that for key-type-vs-char-echoing

  Key-type-echoing : [System] <-> keyboard, screen

  ASCII table

  Control characters :
    // Try below in UNIX
    ctrl-m     ENTER      // printf( "\n" )
    ctrl-d     EOF        // !!! for scanf() to read in ; but seems must be first char of the line in order to work
                          // for Windows, it is ctrl-z
                          // An input routine such as scanf() or getchar() must have knowledge of file-length (if the input is a file) so as to return -1 when necessary
    ctrl-g     bell       // works for Window DOS window
    ctrl-c     BREAK or INTERRUPT
    ctrl-h     BACKSPACE // try this when entering a UNIX/Windows command in a Linux-console/Windows-cmd window
    ctrl-i     TAB       // try this when editing an article in vi // printf( "\t" ) ; // For Linux/Windows, TAB means "command completion"

∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼

1. Shell special characters and shell metacharacters

What does 'meta' mean?   # Below is what I think the term 'meta' should mean.

  在社會之中，人與人互動，人在生活的過程之中也會有七情六慾與愛恨情仇。  // object-level
  社會學家研究人在社會之中的生活與互動(以及所謂的「人」又分哪些人)。    // meta-level之一
  心理學家研究人的七情六慾與愛恨情仇的來來去去。                        // meta-level之二
  方法論者研究『社會學家研究「社會之中人的生活與互動(與人有哪些人)」』應該用什麼方法。 // a meta-meta-level (meta-level之一的meta-level)
  方法論者研究『心理學家研究「人的七情六慾與愛恨情仇的來來去去」』應該用什麼方法。     // another meta-meta-level (meta-level之二的meta-level
  meta-方法論者研究「方法論者在研究他們所研究的對象時應該要使用什麼方法」。            // meta-meta-meta-level
  Etc.

  國民思考要有何活動以及這些活動要有何內容、並從事這些活動。        // object-level
  法律學者研究法律(=國民活動應遵守的規範以及國民與公民的資格等等)。 // meta-level
  憲法學者研究憲法(=「法律」所應遵守的規範)。                       // meta-meta-level
  跨國界思想家研究「憲法」所應遵守的規範(=超級法)                   // meta-meta-meta-level
  「超級法」是無定義名詞(完全是靠宣揚與有效傳播)；所以no more meta-level

We use characters to describe something.
We use meta-characters to describe 「the characters that are being used for describing that something」.
Metacharacters = characters that are given special meaning in describing "object-level" characters.

e.g.,
How do we specify the >>"<< character in a string that is being described using >>"<<?

嚴格說來，"道地"的shell metacharacters只有三個：   "      '      \
(其他的所謂'shell metacharacters'只是「被賦予特殊意義的characters」而已 (只是說：一個char一旦被賦予特殊意義，我們就無法用它來代表它原來所代表的字元，這是一個必須解決的問題。))

為方便起見，許多說明文件或書直接把「有特殊意義的characters」全都叫作metacharacters。這是一件蠻無奈的事。

What all these bog down to are the following two questions :

  What characters (what the literature calls 'metacharacters') are given special meanings and what are their special meanings?

  How do we "turn off" the speciall meaning of a char-symbol (so that the char-symbol represents the char it originally represents)?

∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼

Shell Metacharacters (ShellMetacharaters.txt)  # what hsia calls "shell special characters"

From : The Unix Programming Environment, by Kernighan and Pike, p. 76.

>      prog > FILE   ; direct standard output to FILE
>>
<
|      p1 | p2       ; connect standard output of p1 to standard input of p2
<< str               ; here document: standard input follows, up to next str on a line by itself
*                    ; match any string of zero or more characters in filenames
?                    ; match any single character in filenames
[ccc]                ; match any single character from ccc in filenames;
                       [0-9] [a-z] are legal
;                    ; command terminator: 'p1 ; p2' means "do p1, then p2"
&                    ; like ';' but doesn't wait p1 to finish
`...`                ; run commands in >>...<< ; output replaces `...`
(...)                ; run commands in >>...<< in a sub-shell
{...}                ; run commands in >>...<< in the current shell (rarely used)
$1, $2, etc          ; $0, $1, $2, ..., $9 replaced by arguments to shell file
$var                 ; value of shell variable >>var<<
${var}               ; value of >>var<< ; avoids confusion when concatenated with text
\                    ; >>\c<< take character >>c<< literally, \newline discarded
'...'                ; take >>...<< literally
"..."                ; take >>...<< literally after $, `...`, and >>\<< interpreted
#                    ; if # starts with words, rest of line is a comment
var=value            ; (hsia: must have no space!) assign to variable >>var<<
p1 && p2             ; run p1 ; if successful, run p2
p1 || p2             ; run p2 ; if unsuccessful, run p2

∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼

C-string metacharacter : \   %

# include <stdio.h>
# include <string.h>

int main() {

  printf( "There are %d characters in the string \"123\\n45\", which is printed as >>%s<<.\n", strlen( "123\n45" ), "123\n45" ) ;
  printf( "There are %d characters in the string \"123\\n\\t45\", which is printed as >>%s<<.\n", strlen( "123\n\t45" ), "123\n\t45" ) ;
  printf( "There are %d characters in the string \"123\\n\\t\\a45\", which is printed as >>%s<<.\n", strlen( "123\n\t\a45" ), "123\n\t\a45" ) ;
  printf( "There are %d characters in the string \"123\\n\\t\\a\\b45\", which is printed as >>%s<<.\n", strlen( "123\n\t\a\b45" ), "123\n\t\a\b45" ) ;

} // main()

# Below from https://web.mit.edu/10.001/Web/Course_Notes/c_Notes/tips_printf.html
\a    alert (beep)
\\    backslash
\b    backspace
\r    carriage return
\"    double quote
\f    formfeed
\t    horizontal tab
\n    newline
\0    null character
\'    single quote
\v    vertical tab
\?    question mark

另有：   %c   %d   %e   %f   %g   %s

∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼

Shell special characters - Characters with special meaning
(AKA "shell metacharacters", as are often (but wrongly) called)

一、Unconditional special characters (只要出現就算是特殊字元)

Delimiters that terminate basic commands (always a token by itself, even if it is within a string) // command terminators
  >                    // be careful of >> and <<, where '<<any-string ... ENTERany-string' is "temporary input file"
  <
  |                    // be careful of ||
  ;
  &                    // be careful of && and &|, where '&|' means both stderr and stdout are piped

Delimiters that separate tokens (it itself is not a token)
  WS                   // note : ENTER forces the input to be "fed" to the program waiting to read its input

# C program convention : a line that ends with a '\' (followed by ENTER) means what ???

Chars that start/end a command but are not delimiters in the final count
  `                    // e.g., >>e`echo ch`o 123<<    # this example shows why re-getToken is needed

Delimiters that start/end a command
  (                    // '(' must be the first of a basic command to be legal
  )                    // ')' must have a corresponding '(' to be legal

# ((exactly-one-arith-expression)) such as (( a = a + b, b++, a-- )), where 'a' and 'b' are environment variables

二、Conditional special characters (在特定狀況下才算是特殊字元 i.e., has a special meaning only when the char in question is under specific conditions)

1. Has to be without a WS prefix (in order to have a special meaning)

  =str               ; '=' can have a postfix that is a WS AND it is the very first token
                     ; of a basic command or is following another 'var=value'

2. has to be in the place of a file name or a block (of commands) ; moreover, must have a corresponding '}'

  {

3. Has to have a WS prefix (in order to have a special meaning)

  #                    // except $#, and has to be with a ' ' prefix in order to have a special meaning
  '~', '.', '..'       // in addition, must also have a postfix that is either '/' or a WS
                       // ('~' is substituted, while '.' and '..' are not) ; '.' and '..' are hard links in fact (ref. ClassMaterialsFor2022-11-01) and are treated just like any other file names

4. Has to be in the place of a file name (in order to have a special meaning)

  *                    ; match any string of zero or more characters in filenames
                       ; (however, '*' alone does not match '.someString')
  ?                    ; match any single character in filenames
  [                    ; match any single character from ccc in filenames ; must have a corresponding ']'
                       ; the 'ccc' in '[ccc]' must not include special chars (unless escaped)

  # [ Linux-condition ]     OR     [[ Linux-condition ]]
  # Usage : [[ Linux-condition ]] ; echo $?
  # Usage : if [[ Linux-condition ]] ENTER ...

  # Note : when using '*' and/or '?' and/or '[' in a file name, if there is no mathing exiting file-name, the pattern is used literally as the new file name
  # Example: for the command 'date > test[\ ]a', if there is already a file named 'test a', its content is changed ;
  #          otherwise, a new file named 'test[ ]a' is created.

  # Note : Only when '[' is within a string and is in the place of file names is it considered to have a special meaning ; in all other cases, '[' is considered a normal character like any letter.
  #        ('[[' is considered to be the same as '[' as far as a command goes ; but 'te[sx]t' is not considered the same as 'te[[sx]t')

5. Has to have a postfix that is not a WS (in order to have a special meaning)

  '$'  "${"            ; in addition, '${' must also have a corresponding '}' in order to be legal

  # $<num>, $<str> : until the WS behind them
  # $'C-str'       : represents the-string-in-the-C-sense
  # $(( exactly-one-arith-expression ))   # Think of it as '(( ... ))' but we want the expression-value and not exit-value

  '!'                  ; start of a history command which should be of the form '!-<num>' or '!<num>'

三、Metacharacters (用以消除特殊字元的「特殊」身分)

  \                    // '\ENTER' df= no char
  '                    // result is one string
  "                    // expands '$', '!', '`' within (i.e., 這三個依舊特殊) ; respects '\' ; result is still one string


∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼

Illustrate the working of, e.g., '> history 15' and '> !-1' and '> !1084'

∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼

------------ BashScriptEssentials.txt - START -----------------------

# Below is copied from the output of >>man bash<<, plus some additions of my own.

Lists

    # Below, a "pipeline" consists of what hsia calls "basic commands" optionally separated by
    # file-redirection operators ('>', '<', '>>', '|', '|&')

    A list is a sequence of one or more pipelines separated by one of the operators ;, &, &&, or
    ||, and optionally terminated by one of ;, &, or <newline>.

    Of  these  list  operators, && and || have equal precedence, followed by ; and &, which have
    equal precedence.

    A sequence of one or more newlines may appear in a list instead of a  semicolon  to  delimit
    commands.

    If  a command is terminated by the control operator &, the shell executes the command in the
    background in a subshell.  The shell does not wait for the command to finish, and the return
    status  is 0.  Commands separated by a ; are executed sequentially; the shell waits for each
    command to terminate in turn.  The return status is the exit status of the last command exe-
    cuted.

    AND  and  OR lists are sequences of one of more pipelines separated by the && and || control
    operators, respectively.  AND and OR lists are executed with  left  associativity.   An  AND
    list has the form

           command1 && command2

    command2 is executed if, and only if, command1 returns an exit status of zero.

    An OR list has the form

           command1 || command2

    command2  is  executed  if  and only if command1 returns a non-zero exit status.  The return
    status of AND and OR lists is the exit status of the last command executed in the list.

Compound commands

    # Note : When there is no preceding '$', '(' or '{' or '[' has to be located at the very
    #        start of a (compound) command in order for it to be interpreted (by bash) as a
    #        syntactically correct (compound) command.

    (list) list is executed in a subshell environment (see COMMAND EXECUTION ENVIRONMENT below).
           Variable  assignments and builtin commands that affect the shell's environment do not
           remain in effect after the command completes.  The return status is the  exit  status
           of list.

    { list; }
           list  is  simply  executed in the current shell environment.  list must be terminated
           with a newline or semicolon.  This is known as a group command.  The return status is
           the  exit  status  of list.  Note that unlike the metacharacters ( and ), { and } are
           reserved words and must occur where a reserved word is permitted  to  be  recognized.
           Since  they do not cause a word break, they must be separated from list by whitespace
           or another shell metacharacter.

    (( expression-subject-to-arithmetic-evaluation ))
           The expression is evaluated according to the rules described below  under  ARITHMETIC
           EVALUATION.  If the value of the expression is non-zero, the return status is 0; oth-
           erwise the return status is 1.  This is exactly equivalent to >>let "expression"<<.

    [[ conditional-expression ]]
           Return a status of 0 or 1 depending on the evaluation of the  conditional  expression
           expression.   Expressions  are composed of the primaries described below under CONDI-
           TIONAL EXPRESSIONS.  Word splitting and pathname expansion are not performed  on  the
           words  between  the  [[  and  ]];  tilde expansion, parameter and variable expansion,
           arithmetic expansion, command substitution, process substitution, and  quote  removal
           are performed.  Conditional operators such as -f must be unquoted to be recognized as
           primaries.

        The being enclosed expressions  may  be  combined  using the following operators, listed
        in decreasing order of precedence:

               ( expression )
                      Returns the value of expression.  This may be  used  to  override  the
                      normal precedence of operators.
               ! expression
                      True if expression is false.
               expression1 && expression2
                      True if both expression1 and expression2 are true.
               expression1 || expression2
                      True if either expression1 or expression2 is true.

                   The && and || operators do not evaluate expression2 if the value of expression1
                   is sufficient to determine the return value of the entire conditional expression.

    # Below, ';' can be replaced by ENTER (newline)

    for name [ [ in [ word ... ] ] ; ] do list ; done

    for (( expr1 ; expr2 ; expr3 )) ; do list ; done

    select name [ in word ] ; do list ; done

    if list; then list; [ elif list; then list; ] ... [ else list; ] fi

    while list-1; do list-2; done

    until list-1; do list-2; done

    case word in [ [(] pattern [ | pattern ] ... ) list ;; ] ... esac

         The ';;' in a case-construct can be either ';;' or ';&' or ';;&'.

         If the ;; operator is used, no subsequent matches are
         attempted after the first pattern match.  Using ;& in place of ;; causes execution to
         continue with the list associated with the next set of patterns.  Using ;;& in place
         of ;; causes the shell to test the next pattern list in the statement,  if  any,  and
         execute  any  associated  list  on a successful match.  The exit status is zero if no
         pattern matches.  Otherwise, it is the exit status of the last  command  executed  in
         list.

Shell Function Definitions

    A  shell  function is an object that is called like a simple command and executes a compound
    command with a new set of positional parameters.  Shell functions are declared as follows:

    name () compound-command [redirection]
    function name [()] compound-command [redirection]

ARITHMETIC EVALUATION

    The shell allows arithmetic expressions to be evaluated, under  certain  circumstances  (see
    the  let  and  declare  builtin  commands  and Arithmetic Expansion).  Evaluation is done in
    fixed-width integers with no check for overflow, though division by 0 is trapped and flagged
    as  an error.  The operators and their precedence, associativity, and values are the same as
    in the C language.  The following list of operators is grouped into levels  of  equal-prece-
    dence operators.  The levels are listed in order of decreasing precedence.

    id++ id--
           variable post-increment and post-decrement
    ++id --id
           variable pre-increment and pre-decrement
    - +    unary minus and plus
    ! ~    logical and bitwise negation
    **     exponentiation
    * / %  multiplication, division, remainder
    + -    addition, subtraction
    << >>  left and right bitwise shifts
    <= >= < >
           comparison
    == !=  equality and inequality
    &      bitwise AND
    ^      bitwise exclusive OR
    |      bitwise OR
    &&     logical AND
    ||     logical OR
    expr?expr:expr
           conditional operator
    = *= /= %= += -= <<= >>= &= ^= |=
           assignment
    expr1 , expr2
           comma

    Shell variables are allowed as operands; parameter expansion is performed before the expres-
    sion is evaluated.  Within an expression, shell variables may also  be  referenced  by  name
    without using the parameter expansion syntax.  A shell variable that is null or unset evalu-
    ates to 0 when referenced by name without using the parameter expansion syntax.   The  value
    of  a  variable  is  evaluated  as an arithmetic expression when it is referenced, or when a
    variable which has been given the integer attribute using declare -i is assigned a value.  A
    null  value  evaluates to 0.  A shell variable need not have its integer attribute turned on
    to be used in an expression.

    Constants with a leading 0 are interpreted as octal numbers.  A leading  0x  or  0X  denotes
    hexadecimal.   Otherwise, numbers take the form [base#]n, where the optional base is a deci-
    mal number between 2 and 64 representing the arithmetic base, and n  is  a  number  in  that
    base.   If  base#  is omitted, then base 10 is used.  When specifying n, the digits greater<
    than 9 are represented by the lowercase letters, the uppercase letters, @, and  _,  in  that
    order.   If  base  is  less than or equal to 36, lowercase and uppercase letters may be used
    interchangeably to represent numbers between 10 and 35.

    Operators are evaluated in order of precedence.  Sub-expressions in parentheses  are  evalu-
    ated first and may override the precedence rules above.

CONDITIONAL EXPRESSIONS

    Conditional  expressions are used by the [[ compound command and the test and [ builtin com-
    mands to test file attributes and perform string and  arithmetic  comparisons.   Expressions
    are formed from the following unary or binary primaries.  If any file argument to one of the
    primaries is of the form /dev/fd/n, then file descriptor n is checked.  If the file argument
    to  one  of the primaries is one of /dev/stdin, /dev/stdout, or /dev/stderr, file descriptor
    0, 1, or 2, respectively, is checked.

    Unless otherwise specified, primaries that operate on files follow symbolic links and  oper-
    ate on the target of the link, rather than the link itself.

    When  used  with  [[, the < and > operators sort lexicographically using the current locale.
    The test command sorts using ASCII ordering.

    -a file
           True if file exists.
    -b file
           True if file exists and is a block special file.
    -c file
           True if file exists and is a character special file.
    -d file
           True if file exists and is a directory.
    -e file
           True if file exists.
    -f file
           True if file exists and is a regular file.
    -g file
           True if file exists and is set-group-id.
    -h file
           True if file exists and is a symbolic link.
    -k file
           True if file exists and its ``sticky'' bit is set.
    -p file
           True if file exists and is a named pipe (FIFO).
    -r file
           True if file exists and is readable.
    -s file
           True if file exists and has a size greater than zero.
    -t fd  True if file descriptor fd is open and refers to a terminal.
    -u file
           True if file exists and its set-user-id bit is set.
    -w file
           True if file exists and is writable.
    -x file
           True if file exists and is executable.
    -G file
           True if file exists and is owned by the effective group id.
    -L file
           True if file exists and is a symbolic link.
    -N file
           True if file exists and has been modified since it was last read.
    -O file
           True if file exists and is owned by the effective user id.
    -S file
           True if file exists and is a socket.
    file1 -ef file2
           True if file1 and file2 refer to the same device and inode numbers.
    file1 -nt file2
           True if file1 is newer (according to modification  date)  than  file2,  or  if  file1
           exists and file2 does not.
    file1 -ot file2
           True if file1 is older than file2, or if file2 exists and file1 does not.
    -o optname
           True  if  the  shell  option  optname  is enabled.  See the list of options under the
           description of the -o option to the set builtin below.
    -v varname
           True if the shell variable varname is set (has been assigned a value).
    -R varname
           True if the shell variable varname is set and is a name reference.
    -z string
           True if the length of string is zero.
    string
    -n string
           True if the length of string is non-zero.

    string1 == string2
    string1 = string2
           True if the strings are equal.  = should be used with the test command for POSIX con-
           formance.  When used with the [[ command, this performs pattern matching as described
           above (Compound Commands).


    string1 != string2
           True if the strings are not equal.

    string1 < string2
           True if string1 sorts before string2 lexicographically.

    string1 > string2
           True if string1 sorts after string2 lexicographically.

    arg1 OP arg2
           OP is one of -eq, -ne, -lt, -le, -gt, or  -ge.   These  arithmetic  binary  operators
           return  true  if  arg1  is  equal to, not equal to, less than, less than or equal to,
           greater than, or greater than or equal to arg2, respectively.  Arg1 and arg2  may  be
           positive or negative integers.

EXPANSION

    Expansion is performed on the command line after it has been split into  words.   There  are
    seven kinds of expansion performed: brace expansion, tilde expansion, parameter and variable
    expansion, command substitution, arithmetic expansion, word splitting, and  pathname  expan-
    sion.

    The  order of expansions is: brace expansion; tilde expansion, parameter and variable expan-
    sion, arithmetic expansion, and command substitution (done in a left-to-right fashion); word
    splitting; and pathname expansion.

    Only  brace expansion, word splitting, and pathname expansion can change the number of words
    of the expansion; other expansions expand a single word to a single word.  The  only  excep-
    tions  to  this  are the expansions of "$@" and "${name[@]}" as explained above (see PARAME-
    TERS).

  Word Splitting
    The shell scans the results of parameter expansion, command substitution, and arithmetic
    expansion that did not occur  within  double  quotes for word splitting. (And word splitting,
    in turn, can change the number of words.)

### Final conclusion by hsia :
###
### 先區分出command line中所有的特殊字元與words(不含white-spaces)與strings(可以含white-spaces)，
### 然後整理出a list of pipelines (pipeline與pipeline之間是以 ;, &, &&, || 隔開來)
### (pipeline是(a) basic command( = 基本上是一串的words與strings，
###                                 其中可以出現'$(...)'  (之中的'...'也是一個command-line), 或
###                                             '$((...))'(之中的'...'只能是一個arithmetic expression)
###                             ), 或
###            (b) '( ... )'   (之中的'...'也是一個command-line), 或
###            (c) '(( ... ))' (之中的'...'只能是一個arithmetic expression)
###            (d) '{ ... ; }' (之中的'...'也是一個command-line)
###  其後可以followed by file-redirection operators 如 '>', '<', '>>', '|', '|&')
### )
### 然後依規矩執行各個pipeline(即 先安排好stdin, stdout, stderr，
###                               然後EITHER直接執行the built-in 或 '((..))'之中的'...'、
###                                   OR fork a child shell去執行the basic command 或 '(...)'之中的'...'  )
###
### 註：如果此pipeline是'... | ... | ...'，則是 for each '...' 都另fork a child shell去執行之
###
### 註：'var=str var=str ...' is considered a basic command (it is in fact a built-in)
###
### 註：執行>>`...`<<的方式是：fork a child shell去執行'...'，然後將出現於stdout中的output拿來replace此>>`...`<<
###
### 註：執行>>{ ... ; }<< 等同 執行>> ... <<<
###
### (When executing a BASIC COMMAND, the shell does the following IN THAT ORDER.)
### history-substitution (no repetition to talk about, since there are no history commands in history list)
### -> alias substitution (with repetition)
### -> $-substitution (no repetition ; however, there can be nested $-substitutions ('$'s can be nested))
### -> file-name expansion (no repetition)
### -> final command execution # the eventual execution of the current basic command

Example :

> PrintPara this is "an example"  # OR : 'an example' (same effect in this case)
Number of arguments : 4
Argument 0 >>PrintPara<<
Argument 1 >>this<<
Argument 2 >>is<<
Argument 3 >>an example<<

> anExample='an example'          # OR : "an example" (same effect in this case)

> PrintPara this is $anExample
Number of arguments : 5
Argument 0 >>PrintPara<<
Argument 1 >>this<<
Argument 2 >>is<<
Argument 3 >>an<<
Argument 4 >>example<<

> alias WhatAVar='$whatavar'
> whatavar='echo `date` $((3+5))'
> WhatAVar          # Did not work (>>`date` $((3+5))<< remains unchanged)
> alias WhatAVarAgain='echo `date` $((3+5))'
> WhatAVarAgain     # Worked (>>`date` $((3+5))<< changed)
> alias StrangeWhat=WhatADay
> StrangeWhat
> alias StrangeWhat=WhatAVarAgain
> StrangeWhat

> alias abc='echo'
> myDateABC='`date`'
> abc $myDateABC
`date`
> echo $myDateABC
`date`
> `date`
二: command not found

# myVar4='`date`' ; echo $myVar4 並沒有展兩次
# myVar41='$(date)' ; echo $myVar41 也是
# myVar5='$((3+4))' ; echo $myVar5 也沒有
# '> nonsense='ls *' ; > PrintPara $nonsense ' does work though

============================================================================

# A counter-example???

    # The shell scans the results of parameter expansion, command
    # substitution, and arithmetic expansion that did not occur within
    # double quotes for word splitting.

# e.g.,

> PrintPara `date`
Total number of parameters : 7

Parameter 0 : >>PrintPara<<
Parameter 1 : >>三<<
Parameter 2 : >>11月<<
Parameter 3 : >>30<<
Parameter 4 : >>09:24:56<<
Parameter 5 : >>CST<<
Parameter 6 : >>2022<<

# However, below shows that word-(re)splitting does not occur when using command
# substitution to change the (string) value of an environment variable ;
# this may be due to the fact that '<var>=<something>' is a special "command"
# (and, as a result, is handled in a way that is "non-standard")

> abcde=`date`
> echo $abcde
三 11月 30 09:24:37 CST 2022

# Try the following "command" to see that '<var>=<something>' is indeed handled by
# the system (the shell, or bash in our case) in a "non-standard way"

# >> abc=10 xyz=20 efg=30 wxy=40 << is OK  # Note : there are no command separators!
# >> abc=10 date << is OK                  # again, no command separator needed
# >> abc=10 date date << not OK            # need a command separator between 'date'
# >> date date << not OK                   # command separator needed

    A variable may be assigned to by a statement of the form

           name=[value]

    If  value  is not given, the variable is assigned the null string.  All
    values undergo tilde expansion, parameter and variable expansion,  com-
    mand  substitution, arithmetic expansion, and quote removal (see EXPAN-
    SION below).  If the variable has its integer attribute set, then value
    is evaluated as an arithmetic expression even if the $((...)) expansion
    is not used (see Arithmetic Expansion below).  Word  splitting  is  NOT
    performed,  with the exception of "$@" as explained below under Special
    Parameters.  Pathname expansion is NOT  performed.  ...


============================================================================

# A counter-example???

    # The shell scans the results of parameter expansion, command
    # substitution, and arithmetic expansion that did not occur within
    # double quotes for word splitting.

# e.g.,

> PrintPara `date`
Total number of parameters : 7

Parameter 0 : >>PrintPara<<
Parameter 1 : >>三<<
Parameter 2 : >>11月<<
Parameter 3 : >>30<<
Parameter 4 : >>09:24:56<<
Parameter 5 : >>CST<<
Parameter 6 : >>2022<<

# However, below shows that word-(re)splitting does not occur when using command
# substitution to change the (string) value of an environment variable ;
# this may be due to the fact that '<var>=<something>' is a special "command"
# (and, as a result, is handled in a way that is "non-standard")

> abcde=`date`
> echo $abcde
三 11月 30 09:24:37 CST 2022

# Try the following "command" to see that '<var>=<something>' is indeed handled by
# the system (the shell, or bash in our case) in a "non-standard way"

# >> abc=10 xyz=20 efg=30 wxy=40 << is OK  # Note : there are no command separators!
# >> abc=10 date << is OK                  # again, no command separator needed
# >> abc=10 date date << not OK            # need a command separator between 'date'
# >> date date << not OK                   # command separator needed

    A variable may be assigned to by a statement of the form

           name=[value]

    If  value  is not given, the variable is assigned the null string.  All
    values undergo tilde expansion, parameter and variable expansion,  com-
    mand  substitution, arithmetic expansion, and quote removal (see EXPAN-
    SION below).  If the variable has its integer attribute set, then value
    is evaluated as an arithmetic expression even if the $((...)) expansion
    is not used (see Arithmetic Expansion below).  Word  splitting  is  NOT
    performed,  with the exception of "$@" as explained below under Special
    Parameters.  Pathname expansion is NOT  performed.  ...

------------ BashScriptEssentials.txt - END -------------------------

# shell的GetToken()遠比PL的GetToken()要複雜。But can be done (of course).

# The following are interesting ...

wang > ab=da
wang > cd=te

wang > ${ab}${cd}
四 12月  2 14:24:04 CST 2021

wang > echo $(${ab}${cd})
四 12月 2 14:26:05 CST 2021

wang > $(${ab}${cd})
四: command not found

wang > ls > date
wang > da*
四 12月  2 15:51:35 CST 2021


### The following serves to prove that there are no repeated file-name expansions
### This is a reasonable design. If repeated file-name expansion is allowed, we will be in trouble.

wang > ls
2                 MyEcho1                    PrintPID         tamp2.txt               temp4.txt   test 1 2
2021-Special      MyEcho2                    PrintProcessID   teemp2.txt              temp5.txt   test2
5                 MyEcho3                    Proj1.txt        temp                    temp6.txt   test9001.txt
CMD               openssl-0.9.7m             Proj2.txt        temp1                   temp7.txt   testab*
date              openssl-0.9.7m.tar         Proj3.txt        temp1.txt               temp8.txt   testabc?
empty.txt         openssl-backup             Proj4.txt        temp2.txt               temp?.txt   test{test
error.txt         OurSchemeProj1.txt         regular.txt      temp3Hard1SoftSoft.txt  t e s t     test[ ]x
file1             PERL                       Script_Practice  temp3Hard1Soft.txt      Test        t[ ]st1
file2             PrintEchoDollarDollar      SET              temp3Hard1.txt          test00.txt  vi_test.txt
ForWithJustID     PrintEchoDollarDollar.cpp  ShellPractice    temp3Hard2.txt          test01.txt  WhatFuncs
InfiniteLoop      PrintLSStar                SOCKET           temp3.txt               test02.txt  WhatIsVar
InfiniteLoop.cpp  PrintLSStar.cpp            t*               temp4Hard1.txt          test1       WhatVars
MyEcho0           PrintPara                  taemp2.txt       temp4HardHard.txt       test 1

wang > ls temp?.txt
temp1.txt  temp2.txt  temp3.txt  temp4.txt  temp5.txt  temp6.txt  temp7.txt  temp8.txt

wang > ls > 'temp?.txt'
wang > ls temp?.txt
temp1.txt  temp2.txt  temp3.txt  temp4.txt  temp5.txt  temp6.txt  temp7.txt  temp8.txt  temp?.txt

wang > ls > 't*'
wang > ls t*
t*          tamp2.txt   temp1.txt  temp3Hard1SoftSoft.txt  temp3Hard1.txt  temp3.txt       temp4HardHard.txt  temp5.txt  temp7.txt  test00.txt  test02.txt taemp2.txt  teemp2.txt  temp2.txt  temp3Hard1Soft.txt      temp3Hard2.txt  temp4Hard1.txt  temp4.txt          temp6.txt  temp7.txt  temp8.txt  temp?.txt  test01.txt  test9001.txt



∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼

# 有match到就是被match的，沒match到就是它自己。

# Suppose there is a file named 't e s t'

# The following commands will change the file named 't e s t'
> vi t[\ ]e[\ ]s[\ ]t
> date > t[\ ]e[\ ]s[\ ]t

# Suppose there is no file named 't e s t' or 'a b c d'

# The following commands will create a file with the name being the specified pattern
> vi t[\ ]e[\ ]s[\ ]t        # creates the file 't[ ]e[ ]s[ ]t'
> date > a[\ ]b[\ ]c[\ ]d    # creates the file 'a[ ]b[ ]c[ ]d'



∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼∼

Why doesn't the system like the command >>PrintPara This is date 'That is also date' "Today is `date`. Wonderful!" "I'm at `pwd` and not ~."<< ？

How can we solve the "~ not substituted (by '/root')" problem in the above PrintPara example?

i.e., what we would like to have is the following output :
Para 0 >>PrintPara<<
Para 1 >>This<<
Para 2 >>is<<
Para 3 >>date<<
Para 4 >>That is also date<<
Para 5 >>Today is 四 11月  3 16:07:59 CST 2022. Wonderful.<<
Para 6 >>I'm at /root/CTest and not /root.<<

Tell me why your solution works.

